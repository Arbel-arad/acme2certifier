name: CA handler tests - MicrosoftCA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  rpm_build_and_upload:
    name: "rpm_build_and_upload"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build rpm package"
      id: rpm_build
      uses: ./.github/actions/rpm_build_upload

  mscertsrv_handler_eab_profile_tests_rpm:
    name: "mscertsrv_handler_eab_profile_tests_rpm"
    runs-on: ubuntu-latest
    needs: rpm_build_and_upload
    strategy:
      # max-parallel: 1
      fail-fast: false
      matrix:
        rhversion: [8, 9]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Prepare Alma environment"
      uses: ./.github/actions/rpm_prep
      with:
        GH_SBOM_USER: ${{ secrets.GH_SBOM_USER }}
        GH_SBOM_TOKEN: ${{ secrets.GH_SBOM_TOKEN }}
        RH_VERSION: ${{ matrix.rhversion }}
        RPM_BUILD: false
        NAME_SPACE: "local"

    - name: Download rpm package
      uses: actions/download-artifact@v4
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
        path: data/

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Setup tunnel"
      uses: ./.github/actions/wf_specific/ms_ca_handler/tunnel_setup
      with:
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        NAME_SPACE: local

    - name: "EAB ACME Profiling - Setup a2c with ms_wcce_ca_handler (Kerboros)"
      run: |
        mkdir -p data/acme_ca
        sudo cp test/ca/certsrv_ca_certs.pem data/acme_ca/ca_certs.pem
        sudo touch data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/mscertsrv_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> data/acme_srv.cfg
        sudo echo "auth_method: gssapi" >> data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> data/acme_srv.cfg
        sudo echo "ca_bundle: volume/acme_ca/ca_certs.pem" >> data/acme_srv.cfg
        sudo echo "krb5_config: volume/acme_ca/krb5.conf" >> data/acme_srv.cfg
        sudo echo "verify: False" >> data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"WebServerModified\": \"http:\/\/foo.bar\/acmeca1\", \"WebServer\": \"http:\/\/foo.bar\/acmeca2\", \"profile3\": \"http:\/\/foo.bar\/profile3\"}/g" data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" data/acme_srv.cfg

        sudo echo "eab_profiling: True" >> data/acme_srv.cfg
        sudo echo -e "\n[EABhandler]" >> data/acme_srv.cfg
        sudo echo "eab_handler_file: /opt/acme2certifier/examples/eab_handler/kid_profile_handler.py" >> data/acme_srv.cfg
        sudo echo "key_file: /opt/acme2certifier/volume/acme_ca/kid_profiles.json" >> data/acme_srv.cfg

        sudo cp examples/eab_handler/kid_profiles.json data/acme_ca/kid_profiles.json
        sudo chmod 777 data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \[\"profile_1\", \"profile_2\", \"profile_3\"\]/\"template\"\: \[\"WebServerModified\"\, \"WebServer\"]/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"profile_id\"\: \"profile_2\"/\"template\"\: \"WebServerModified\"/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca_2\",/\"unknown_key\": \"unknown_value\"/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/\"ca_name\": \"example_ca\",/\"unknown_key\": \"unknown_value\"/g" data/acme_ca/kid_profiles.json
        sudo sed -i "s/example.net/local/g" data/acme_ca/kid_profiles.json
        sudo sed -i '18,19d' data/acme_ca/kid_profiles.json
        sudo sed -i '8,9d' data/acme_ca/kid_profiles.json

        sudo touch data/acme_ca/krb5.conf
        sudo chmod 777 data/acme_ca/krb5.conf
        cat <<EOF > data/acme_ca/krb5.conf
        $WES_KRB5_CONF
        EOF
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}

    - name: "EAB ACME Profiling - Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh
        docker exec acme-srv yum install -y krb5-libs

    - name: "EAB ACME Profiling - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_eab_acmeprofile
      with:
        NAME_SPACE: local
        DEPLOYMENT_TYPE: rpm
        TAIL_NUMBER: 1900

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo rm -rf data/*.rpm
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        docker exec acme-srv ls -la /tmp > ${{ github.workspace }}/artifact/data/tmp_list
        docker exec acme-srv ls -la /tmp
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: mscertsrv_handler_profile_tests_rpm-rh${{ matrix.rhversion }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  rpm_cleanup:
    name: "rpm_cleanup"
    runs-on: ubuntu-latest
    needs: [mscertsrv_handler_eab_profile_tests_rpm]
    steps:
    - name: "Delete artifact"
      uses: geekyeggo/delete-artifact@v5
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
