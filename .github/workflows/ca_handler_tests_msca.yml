name: CA handler tests - MicrosoftCA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  mswcce_handler_tests:
    name: "mswcce_handler_tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "create folders"
      run: |
        mkdir lego
        mkdir acme-sh
        mkdir certbot

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Install dnsmasq"
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq
        sudo systemctl disable systemd-resolved
        sudo systemctl stop systemd-resolved
        sudo mkdir -p dnsmasq
        sudo cp .github/dnsmasq.conf dnsmasq/
        sudo chmod -R 777 dnsmasq/dnsmasq.conf
        sudo sed -i "s/RUNNER_IP/$RUNNER_IP/g" dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_FQDN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_ADS_DOMAIN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WES_HOST/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        cat dnsmasq/dnsmasq.conf
        sudo cp dnsmasq/dnsmasq.conf /etc/
        sudo systemctl enable dnsmasq
        sudo systemctl start dnsmasq
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "[ PREPARE ] test dns resulution"
      run: |
        host $WCCE_ADS_DOMAIN 127.0.0.1
        host $WCCE_FQDN 127.0.0.1
        host $WES_HOST 127.0.0.1
      env:
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "Build docker-compose (${{ matrix.websrv }}_${{ matrix.dbhandler }})"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        sed -i "s/wsgi/$DB_HANDLER/g" .env
        sed -i "s/apache2/$WEB_SRV/g" .env
        cat .env
        docker network create acme
        docker-compose up -d
        docker-compose logs
      env:
        WEB_SRV: ${{ matrix.websrv }}
        DB_HANDLER: ${{ matrix.dbhandler }}

    - name: "Prepare ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "Establish SSH connection"
      run: sudo ssh $SSH_USER@$SSH_HOST -fN -i /tmp/rd/ak.tmp -p $SSH_PORT -o UserKnownHostsFile=/tmp/rd/known_hosts -L 445:$WCCE_HOST:445 -L 88:$WCCE_HOST:88 -L 443:$WES_IP:443 -g
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WES_IP: ${{ secrets.WES_IP }}
        CMP_HOST: ${{ secrets.CMP_HOST }}

    - name: "Sleep for 5s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 5s

    - name: "NTLM - Setup a2c with ms_wcce_ca_handler (ntlm)"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ssh_host: $SSH_HOST:$SSH_PORT" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "NTLM - Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "NTLM - Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "NTLM - Enroll acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer

    - name: "NTLM - Register certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "NTLM - Enroll certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem certbot/live/certbot/cert.pem

    - name: "NTLM - Enroll lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt

    - name: "KRB - Setup a2c with ms_wcce_ca_handler (Kerboros)"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "domain_controller: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "use_kerberos: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        DNSMASQ_IP: ${{ env.DNSMASQ_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}

    - name: "KRB - Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB - Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "KRB - Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "KRB - Enroll acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "KRB - Check for kerberos connection"
      working-directory: examples/Docker/
      run: |
        docker-compose logs | grep -i "Trying to connect"

    - name: "KRB - Register certbot"
      run: |
        sudo rm -rf certbot/
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "KRB - Enroll lego with template in acme_srv.cfg (WebServer)"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "KRB - Enroll acme.sh with template in acme_srv.cfg (WebServer)"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "KRB - Enroll lego with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" --user-agent template=WebServerModified --key-type=rsa2048 -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "KRB - Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv --accountemail 'acme-sh@example.com' --keylength 2048 --issue -d acme-sh.acme --alpn --standalone --useragent template=WebServerModified --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer
        openssl x509 -in acme-sh/acme-sh.acme/acme-sh.acme.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        sudo cp -rp dnsmasq/ ${{ github.workspace }}/artifact/dnsmasq/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: mswcce_handler_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  mscertsrv_handler_tests:
    name: "mscertsrv_handler_tests"
    runs-on: ubuntu-latest
    needs: mswcce_handler_tests
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "create folders and networks"
      run: |
        docker network create local
        mkdir lego
        mkdir acme-sh
        mkdir certbot

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Prepare ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "Setup ssh forwarder"
      run: |
          docker run -d --rm --network local --name=$WCCE_FQDN_WOTLD  -e "MAPPINGS=445:$WCCE_HOST:445; 443:$WCCE_HOST:443; 88:$WCCE_HOST:88" -e "SSH_HOST=$SSH_HOST" -e "SSH_PORT=$SSH_PORT" -e "SSH_USER=$SSH_USER" -p 443:443 -p 445:445 -p 88:88 -v "/tmp/rd/ak.tmp:/ssh_key:ro" davidlor/ssh-port-forward-client:dev
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "Test conection to mscertsrv via ssh tunnel"
      run: |
        docker run -i --rm --network local curlimages/curl --insecure -f https://$WCCE_FQDN
      env:
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}

    - name: "Build docker-compose (${{ matrix.websrv }}_${{ matrix.dbhandler }})"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        sed -i "s/wsgi/$DB_HANDLER/g" .env
        sed -i "s/apache2/$WEB_SRV/g" .env
        cat .env
        sed -i "s/name: acme/name: local/g" docker-compose.yml
        docker-compose up -d
        docker-compose logs
      env:
        WEB_SRV: ${{ matrix.websrv }}
        DB_HANDLER: ${{ matrix.dbhandler }}

    - name: "KRB - Setup a2c with mscertsrv_ca_handler using kerberos"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: gssapi" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "krb5_config: /var/www/acme2certifier/volume/krb5.conf" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg

        sudo touch examples/Docker/data/krb5.conf
        sudo chmod 777 examples/Docker/data/krb5.conf
        cat <<EOF > examples/Docker/data/krb5.conf
        $WES_KRB5_CONF
        EOF

        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB - Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network local curlimages/curl -f http://acme-srv/directory

    - name: "KRB - Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network local curlimages/curl --insecure -f https://acme-srv/directory

    - name: "KRB - Enroll acme.sh with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf acme-sh/
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network local  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.local --alpn --standalone --debug 3 --output-insecure
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.local_ecc/acme-sh.local.cer
        openssl x509 -in acme-sh/acme-sh.local_ecc/acme-sh.local.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "KRB - Enroll lego with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network local goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.local --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.local.crt
        sudo openssl x509 -in lego/certificates/lego.local.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "KRB - Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network local --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.local --alpn --standalone --useragent template=WebServerModified --keylength 2048 --debug 3 --output-insecure
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.local/acme-sh.local.cer
        openssl x509 -in acme-sh/acme-sh.local/acme-sh.local.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "KRB - Enroll lego with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network local goacme/lego -s http://acme-srv -a --email "lego@example.com" --user-agent template=WebServerModified --key-type=rsa2048 -d lego.local --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.local.crt
        sudo openssl x509 -in lego/certificates/lego.local.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "NTLM - Setup a2c with mscertsrv_ca_handler using ntlm"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: ntlm" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "NTLM - Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "NTLM - Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network local curlimages/curl -f http://acme-srv/directory

    - name: "NTLM - Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network local curlimages/curl --insecure -f https://acme-srv/directory

    - name: "NTLM - Enroll acme.sh with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf acme-sh/
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network local  --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.local --alpn --standalone --debug 3 --output-insecure
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.local_ecc/acme-sh.local.cer
        openssl x509 -in acme-sh/acme-sh.local_ecc/acme-sh.local.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "NTLM - Enroll lego with template in acme_srv.cfg (WebServer)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network local goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.local --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.local.crt
        sudo openssl x509 -in lego/certificates/lego.local.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Server"

    - name: "NTLM - Enroll acme.sh with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf acme-sh/
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network local --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.local --alpn --standalone --useragent template=WebServerModified --keylength 2048 --debug 3 --output-insecure
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.local/acme-sh.local.cer
        openssl x509 -in acme-sh/acme-sh.local/acme-sh.local.cer -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "NTLM - Enroll lego with template submitted in command line (WebServerModified)"
      run: |
        sudo rm -rf lego/
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network local goacme/lego -s http://acme-srv -a --email "lego@example.com" --user-agent template=WebServerModified --key-type=rsa2048 -d lego.local --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.local.crt
        sudo openssl x509 -in lego/certificates/lego.local.crt -ext extendedKeyUsage  -noout | grep -i "TLS Web Client"

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp /etc/hosts ${{ github.workspace }}/artifact/data/
        sudo cp /etc/resolv.conf ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: mscertsrv_handler_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
