name: CA handler tests - MicrosoftCA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  container_build:
    name: "container_build"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_build_upload
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

  mscertsrv_handler_tests:
    name: "mscertsrv_handler_tests"
    runs-on: ubuntu-latest
    needs: container_build
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Download container"
      uses: actions/download-artifact@v4
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        path: /tmp

    - name: "Import container"
      run: |
        sudo apt-get install -y docker-compose
        gunzip /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        docker load -i /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar
        docker images

    - name: "Prepare container environment"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}
        CONTAINER_BUILD: false
        NAME_SPACE: local

    - name: "Get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Setup tunnel"
      uses: ./.github/actions/wf_specific/ms_ca_handler/tunnel_setup
      with:
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        NAME_SPACE: local

    - name: "KRB Headerinfo - Setup a2c with mscertsrv_ca_handler"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: gssapi" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "krb5_config: /var/www/acme2certifier/volume/krb5.conf" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg

        sudo touch examples/Docker/data/krb5.conf
        sudo chmod 777 examples/Docker/data/krb5.conf
        cat <<EOF > examples/Docker/data/krb5.conf
        $WES_KRB5_CONF
        EOF
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "Bring up a2c container"
      uses: ./.github/actions/container_up
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}
        NAME_SPACE: local

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB Headerinfo - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_default_headerinfo
      with:
        NAME_SPACE: local

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "KRB ACME Profiling - Setup a2c with mscertsrv_ca_handler"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: gssapi" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "krb5_config: /var/www/acme2certifier/volume/krb5.conf" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"WebServerModified\": \"http:\/\/foo.bar\/acmeca1\", \"WebServer\": \"http:\/\/foo.bar\/acmeca2\", \"profile3\": \"http:\/\/foo.bar\/profile3\"}/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg

        sudo touch examples/Docker/data/krb5.conf
        sudo chmod 777 examples/Docker/data/krb5.conf
        cat <<EOF > examples/Docker/data/krb5.conf
        $WES_KRB5_CONF
        EOF
        cd examples/Docker/
        docker-compose restart
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB ACME Profiling - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_acmeprofile
      with:
        NAME_SPACE: local

    - name: "NTLM Headerinfo - Setup a2c with mscertsrv_ca_handler"
      run: |
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: ntlm" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "NTLM Headerinfo - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_default_headerinfo
      with:
        NAME_SPACE: local

    - name: "NTLM Headerinfo - Setup a2c with mscertsrv_ca_handler with allowed_domainlist configuration"
      run: |
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" examples/Docker/data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.acme\", \"foo1.bar\", \"*.bar.local\"]" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart

    - name: "NTLM Headerinfo - enrollment allowed domainlist"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_allowed_domain_list
      with:
        NAME_SPACE: local

    - name: "NTLM Headerinfo - Verify allowed_domainlist error"
      run: |
        cd examples/Docker
        docker-compose logs | grep "allowed_domainlist" | grep -i "either CN or SANs are not allowed by configuration"

    - name: "NTLM ACME Profiling - Setup a2c with mscertsrv_ca_handler"
      run: |
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: ntlm" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: /var/www/acme2certifier/volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "verify: False" >> examples/Docker/data/acme_srv.cfg
        sudo echo "request_timeout: 30" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"WebServerModified\": \"http:\/\/foo.bar\/acmeca1\", \"WebServer\": \"http:\/\/foo.bar\/acmeca2\", \"profile3\": \"http:\/\/foo.bar\/profile3\"}/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WES_KRB5_CONF: ${{ secrets.WES_KRB5_CONF }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}

    - name: "KRB ACME Profiling - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_acmeprofile
      with:
        NAME_SPACE: local

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp /etc/hosts ${{ github.workspace }}/artifact/data/
        sudo cp /etc/resolv.conf ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: mscertsrv_handler_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  cleanup:
    name: "cleanup"
    runs-on: ubuntu-latest
    needs: [mscertsrv_handler_tests]
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']

    steps:
    - uses: geekyeggo/delete-artifact@v5
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
