name: CA handler tests - MicrosoftCA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  container_build:
    name: "container_build"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']

    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "Build container"
      uses: ./.github/actions/container_build_upload
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

  mswcce_handler_tests:
    name: "mswcce_handler_tests"
    runs-on: ubuntu-latest
    needs: container_build
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "create folders"
      run: |
        mkdir lego
        mkdir acme-sh
        mkdir certbot

    - name: "Download container"
      uses: actions/download-artifact@v4
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        path: /tmp

    - name: "Import container"
      run: |
        sudo apt-get install -y docker-compose
        gunzip /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz
        docker load -i /tmp/a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar
        docker images

    - name: "Prepare container environment"
      uses: ./.github/actions/container_prep
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}
        CONTAINER_BUILD: false

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Install dnsmasq"
      run: |
        sudo apt-get update
        sudo apt-get install -y dnsmasq
        sudo systemctl disable systemd-resolved
        sudo systemctl stop systemd-resolved
        sudo mkdir -p dnsmasq
        sudo cp .github/dnsmasq.conf dnsmasq/
        sudo chmod -R 777 dnsmasq/dnsmasq.conf
        sudo sed -i "s/RUNNER_IP/$RUNNER_IP/g" dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_FQDN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WCCE_ADS_DOMAIN/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        sudo echo "address=/$WES_HOST/$RUNNER_IP" >> dnsmasq/dnsmasq.conf
        cat dnsmasq/dnsmasq.conf
        sudo cp dnsmasq/dnsmasq.conf /etc/
        sudo systemctl enable dnsmasq
        sudo systemctl start dnsmasq
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "[ PREPARE ] test dns resulution"
      run: |
        host $WCCE_ADS_DOMAIN 127.0.0.1
        host $WCCE_FQDN 127.0.0.1
        host $WES_HOST 127.0.0.1
      env:
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WES_HOST: ${{ secrets.WES_HOST }}

    - name: "Setup tunnel"
      uses: ./.github/actions/wf_specific/ms_ca_handler/tunnel_setup
      with:
        WCCE_SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        WCCE_SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        WCCE_SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        WCCE_FQDN_WOTLD: ${{ secrets.WCCE_FQDN_WOTLD }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}
        WCCE_SSH_KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}
        WCCE_SSH_ACCESS_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}

    - name: "NTLM Headerinfo - Setup a2c with ms_wcce_ca_handler"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "timeout: 20" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ssh_host: $SSH_HOST:$SSH_PORT" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}

    - name: "NTLM Headerinfo - Bring up a2c container"
      uses: ./.github/actions/container_up
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "NTLM Headerinfo  - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_default_headerinfo

    - name: "Check container configuration"
      uses: ./.github/actions/container_check
      with:
        DB_HANDLER: ${{ matrix.dbhandler }}
        WEB_SRV: ${{ matrix.websrv }}

    - name: "NTLM ACME Profile - Setup a2c with ms_wcce_ca_handler"
      run: |
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "timeout: 20" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ssh_host: $SSH_HOST:$SSH_PORT" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"WebServerModified\": \"http:\/\/foo.bar\/acmeca1\", \"WebServer\": \"http:\/\/foo.bar\/acmeca2\", \"profile3\": \"http:\/\/foo.bar\/profile3\"}/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}

    - name: "NTLM ACME Profiling - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_acmeprofile
      with:
        DEPLOYMENT_TYPE: container

    - name: "KRB Headerinfo - Setup a2c with ms_wcce_ca_handler"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "domain_controller: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "timeout: 20" >> examples/Docker/data/acme_srv.cfg
        sudo echo "use_kerberos: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nheader_info_list: [\"HTTP_USER_AGENT\"]/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        DNSMASQ_IP: ${{ env.DNSMASQ_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}

    - name: "KRB Headerinfo - Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB Headerinfo - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_default_headerinfo

    - name: "KRB - Setup a2c with mswcce_ca_handler with allowed_domainlist configuration"
      run: |
        sudo sed -i "s/challenge_validation_disable: False/challenge_validation_disable: True/g" examples/Docker/data/acme_srv.cfg
        sudo echo "allowed_domainlist: [\"*.acme\", \"foo1.bar\", \"*.bar.local\"]" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart

    - name: "KRB - enrollment allowed domainlist"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_allowed_domain_list

    - name: "Verify allowed_domainlist error"
      run: |
        cd examples/Docker
        docker-compose logs | grep "allowed_domainlist" | grep -i "either CN or SANs are not allowed by configuration"

    - name: "KRB ACME Profile - Setup a2c with ms_wcce_ca_handler"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WCCE_FQDN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "domain_controller: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "timeout: 20" >> examples/Docker/data/acme_srv.cfg
        sudo echo "use_kerberos: True" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_config_log: True" >> examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/tnauthlist_support: False/tnauthlist_support: False\nprofiles={\"WebServerModified\": \"http:\/\/foo.bar\/acmeca1\", \"WebServer\": \"http:\/\/foo.bar\/acmeca2\", \"profile3\": \"http:\/\/foo.bar\/profile3\"}/g" examples/Docker/data/acme_srv.cfg
        sudo sed -i "s/revocation_reason_check_disable: False/revocation_reason_check_disable: False\nenrollment_timeout: 40/g" examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        DNSMASQ_IP: ${{ env.DNSMASQ_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}
        WCCE_FQDN: ${{ secrets.WCCE_FQDN }}

    - name: "KRB ACME Profile - Sleep for 10s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 10s

    - name: "KRB ACME Profile - Enrollment"
      uses: ./.github/actions/wf_specific/ms_ca_handler/enroll_acmeprofile
      with:
        DEPLOYMENT_TYPE: container

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        sudo cp -rp dnsmasq/ ${{ github.workspace }}/artifact/dnsmasq/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data dnsmasq

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: mswcce_handler_tests-${{ matrix.websrv }}-${{ matrix.dbhandler }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  cleanup:
    name: "cleanup"
    runs-on: ubuntu-latest
    needs: [mswcce_handler_tests ]
    strategy:
      fail-fast: false
      matrix:
        websrv: ['apache2', 'nginx']
        dbhandler: ['wsgi', 'django']

    steps:
    - uses: geekyeggo/delete-artifact@v5
      with:
        name: a2c-${{ github.run_id }}.${{ matrix.websrv }}.${{ matrix.dbhandler }}.tar.gz


    name: "rpm_cleanup"
    runs-on: ubuntu-latest
    needs: [mscertsrv_handler_tests_rpm, mscertsrv_handler_eab_profile_tests_rpm, mswcce_handler_tests_rpm, mswcce_handler_eab_profile_tests_rpm]
    steps:
    - name: "Delete artifact"
      uses: geekyeggo/delete-artifact@v5
      with:
        name: acme2certifier-${{ github.run_id }}.noarch.rpm
