name: CA handler tests - Microsoft CA

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  wcce_handler_tests:
    name: "wcce_handler_tests"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] create letsencrypt and lego folder"
      run: |
        mkdir certbot
        mkdir lego

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup a2c with ms_wcce_ca_handler"
      run: |
        sudo touch examples/Docker/data/ca_certs.pem
        sudo chmod 777 examples/Docker/data/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: /var/www/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $RUNNER_IP" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}

    - name: "Test http://acme-srv/directory is accessable again"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        sudo mkdir acme-sh
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ PREPARE ] ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "[ PREPARE ] establish SSH connection"
      run: sudo ssh $SSH_USER@$SSH_HOST -i /tmp/rd/ak.tmp -p $SSH_PORT -o UserKnownHostsFile=/tmp/rd/known_hosts -L 445:$WCCE_HOST:445 -g ping -c 75 $WCCE_HOST &
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}

    - name: "[ PREPARE ] Sleep for 5s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 5s

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: wcce.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  wes_handler_tests:
    name: "wes_handler_tests"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] create letsencrypt and lego folder"
      run: |
        mkdir certbot
        mkdir lego

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup a2c with mscertsrv_ca_handler"
      run: |
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/mscertsrv_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "host: $WES_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "auth_method: $WES_AUTHMETHOD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_certs.pem" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}

    - name: "Test http://acme-srv/directory is accessable again"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        sudo mkdir acme-sh
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile examples/Docker/data/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/ca_certs.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh certbot lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: wse.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  wcce_handler_tests_rpm:
    name: "wcce_handler_tests_rpm"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: Retrieve Version from version.py
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\'//g) >> $GITHUB_ENV

    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: update version number in spec file
      run: |
        # sudo sed -i "s/Source0:.*/Source0:        %{name}-%{version}.tar.gz/g" examples/install_scripts/rpm/acme2certifier.spec
        sudo sed -i "s/__version__/${{ env.TAG_NAME }}/g" examples/install_scripts/rpm/acme2certifier.spec
        cat examples/install_scripts/rpm/acme2certifier.spec

    - name: build RPM package
      id: rpm
      uses: naveenrajm7/rpmbuild@master
      with:
        spec_file: "examples/install_scripts/rpm/acme2certifier.spec"

    - run: echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}"

    - name: "[ PREPARE ] setup environment for alma installation"
      run: |
        docker network create acme
        sudo mkdir -p data
        sudo chmod -R 777 data
        sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch/acme2certifier-${{ env.TAG_NAME }}-1.0.noarch.rpm data
        sudo cp examples/Docker/almalinux-systemd/rpm_tester.sh data

    - name: "[ PREPARE ] prepare acme_srv.cfg with ms_wcce_ca_handler"
      run: |
        mkdir -p data/acme_ca
        sudo touch data/acme_ca/ca_certs.pem
        sudo chmod 777 data/acme_ca/ca_certs.pem
        sudo echo "$WCCE_CA_BUNDLE" > data/acme_ca/ca_certs.pem
        sudo touch data/acme_ca/acme_srv.cfg
        sudo chmod 777 data/acme_ca/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/mswcce_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "host: $RUNNER_IP" >> data/acme_srv.cfg
        sudo echo "user: $WCCE_USER" >> data/acme_srv.cfg
        sudo echo "password: $WCCE_PASSWORD" >> data/acme_srv.cfg
        sudo echo "template: $WCCE_TEMPLATE" >> data/acme_srv.cfg
        sudo echo "ca_name: $WCCE_CA_NAME" >> data/acme_srv.cfg
        sudo echo "target_domain: $WCCE_ADS_DOMAIN" >> data/acme_srv.cfg
        sudo echo "ca_bundle: /opt/acme2certifier/volume/acme_ca/ca_certs.pem" >> data/acme_srv.cfg
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}
        WCCE_USER: ${{ secrets.WCCE_USER }}
        WCCE_PASSWORD: ${{ secrets.WCCE_PASSWORD }}
        WCCE_TEMPLATE: ${{ secrets.WCCE_TEMPLATE }}
        WCCE_CA_NAME: ${{ secrets.WCCE_CA_NAME }}
        WCCE_ADS_DOMAIN: ${{ secrets.WCCE_ADS_DOMAIN }}
        WCCE_CA_BUNDLE: ${{ secrets.WCCE_CA_BUNDLE }}

    - name: "[ PREPARE ] Almalinux instance"
      run: |
        cat examples/Docker/almalinux-systemd/Dockerfile | docker build -t almalinux-systemd -f - . --no-cache
        docker run -d -id --privileged --network acme --name=acme-srv -v "$(pwd)/data":/tmp/acme2certifier almalinux-systemd

    - name: "[ RUN ] Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh

    - name: "[ PREPARE ] create letsencrypt and lego folder"
      run: |
        mkdir certbot
        mkdir lego

    - name: "Test http://acme-srv/directory is accessable "
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        sudo mkdir acme-sh
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ PREPARE ] ssh environment on ramdisk "
      run: |
        sudo mkdir -p /tmp/rd
        sudo mount -t tmpfs -o size=5M none /tmp/rd
        sudo echo "$SSH_KEY" > /tmp/rd/ak.tmp
        sudo chmod 600 /tmp/rd/ak.tmp
        sudo echo "$KNOWN_HOSTS" > /tmp/rd/known_hosts
      env:
        SSH_KEY: ${{ secrets.WCCE_SSH_ACCESS_KEY }}
        KNOWN_HOSTS: ${{ secrets.WCCE_SSH_KNOWN_HOSTS }}

    - name: "[ PREPARE ] establish SSH connection"
      run: sudo ssh $SSH_USER@$SSH_HOST -i /tmp/rd/ak.tmp -p $SSH_PORT -o UserKnownHostsFile=/tmp/rd/known_hosts -L 445:$WCCE_HOST:445 -g ping -c 75 $WCCE_HOST &
      env:
        SSH_USER: ${{ secrets.WCCE_SSH_USER }}
        SSH_HOST: ${{ secrets.WCCE_SSH_HOST }}
        SSH_PORT: ${{ secrets.WCCE_SSH_PORT }}
        WCCE_HOST: ${{ secrets.WCCE_HOST }}

    - name: "[ PREPARE ] Sleep for 5s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 5s

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile data/acme_ca/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: wcce_rpm.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  wes_handler_tests_rpm:
    name: "wes_handler_tests_rpm"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV

    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: Retrieve Version from version.py
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\'//g) >> $GITHUB_ENV

    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: update version number in spec file
      run: |
        # sudo sed -i "s/Source0:.*/Source0:        %{name}-%{version}.tar.gz/g" examples/install_scripts/rpm/acme2certifier.spec
        sudo sed -i "s/__version__/${{ env.TAG_NAME }}/g" examples/install_scripts/rpm/acme2certifier.spec
        cat examples/install_scripts/rpm/acme2certifier.spec

    - name: build RPM package
      id: rpm
      uses: naveenrajm7/rpmbuild@master
      with:
        spec_file: "examples/install_scripts/rpm/acme2certifier.spec"

    - run: echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}"

    - name: "[ PREPARE ] setup environment for alma installation"
      run: |
        docker network create acme
        sudo mkdir -p data
        sudo chmod -R 777 data
        sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch/acme2certifier-${{ env.TAG_NAME }}-1.0.noarch.rpm data
        sudo cp examples/install_scripts/rpm/*.rpm data
        sudo cp examples/Docker/almalinux-systemd/rpm_tester.sh data

    - name: "[ PREPARE ] setup a2c with mscertsrv_ca_handler"
      run: |
        mkdir -p data/acme_ca
        sudo cp test/ca/certsrv_ca_certs.pem data/acme_ca/ca_certs.pem
        sudo touch data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/mscertsrv_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "host: $WES_HOST" >> data/acme_srv.cfg
        sudo echo "user: $WES_USER" >> data/acme_srv.cfg
        sudo echo "password: $WES_PASSWORD" >> data/acme_srv.cfg
        sudo echo "auth_method: $WES_AUTHMETHOD" >> data/acme_srv.cfg
        sudo echo "template: $WES_TEMPLATE" >> data/acme_srv.cfg
        sudo echo "ca_bundle: volume/acme_ca/ca_certs.pem" >> data/acme_srv.cfg
      env:
        WES_HOST: ${{ secrets.WES_HOST }}
        WES_USER: ${{ secrets.WES_USER }}
        WES_PASSWORD: ${{ secrets.WES_PASSWORD }}
        WES_AUTHMETHOD: ${{ secrets.WES_AUTHMETHOD }}
        WES_TEMPLATE: ${{ secrets.WES_TEMPLATE }}

    - name: "[ PREPARE ] Almalinux instance"
      run: |
        cat examples/Docker/almalinux-systemd/Dockerfile | docker build -t almalinux-systemd -f - . --no-cache
        docker run -d -id --privileged --network acme --name=acme-srv -v "$(pwd)/data":/tmp/acme2certifier almalinux-systemd

    - name: "[ RUN ] Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh

    - name: "[ PREPARE ] create letsencrypt and lego folder"
      run: |
        mkdir certbot
        mkdir lego

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        sudo mkdir acme-sh
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --force
        openssl verify -CAfile data/acme_ca/ca_certs.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile data/acme_ca/ca_certs.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: wes_rpm.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
