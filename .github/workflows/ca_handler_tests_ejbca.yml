name: CA handler tests - EJBCA handler

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  ejb_ca_tests:
    name: "ejbca_hander_handler_tests docker image"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v3

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Prepare Environment"
      working-directory: examples/Docker/
      run: |
        mkdir -p data
        sudo chmod 777 data
        docker network create acme
        sudo sh -c "echo '$EJBCA_IP ejbca' >> /etc/hosts"
      env:
        EJBCA_IP: ${{ env.RUNNER_IP }}

    - name: "[ PREPARE ] create acme-sh, letsencrypt and lego folders"
      run: |
        mkdir certbot
        mkdir lego
        mkdir acme-sh

    - name: "Instanciate ejbca server"
      working-directory: examples/
      run: |
        docker run -id --rm -p 80:8080 -p 443:8443 -v $(pwd)/ejbca:/tmp/data  -v $(pwd)/Docker/data:/tmp/store --name "ejbca" -h ejbca primekey/ejbca-ce

    - name: "Sleep for 180s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 180s

    - name: "Get randmonly generated Superadmin password for ejbca instance"
      run: |
        echo SAEC=$(docker logs ejbca | grep /opt/primekey/bin/start.sh | grep Password: | awk -F'Password: ' '{print $2}' | awk -F ' ' '{print $1}') >> $GITHUB_ENV

    - run: echo "Randmonly generated Superadmin password is ${{ env.SAEC }}"
    - run: echo  ${{ env.SAEC }} > examples/Docker/data/passphrase.txt

    - name: "Configure ejbca"
      run: |
        docker exec -i ejbca bin/ejbca.sh ca getcacert --caname ManagementCA -f /tmp/store/ca_bundle.pem
        docker exec -i ejbca bin/ejbca.sh config protocols enable --name "REST Certificate Management"
        docker exec -i ejbca bin/ejbca.sh config protocols enable --name "REST Certificate Management V2"
        docker exec -i ejbca bin/ejbca.sh ca init acmeca "CN=acmeca" soft foo123 4096 RSA -v 365 --policy 2.5.29.32.0 -s SHA256WithRSA

    - name: "Get CAID"
      run: |
        echo CAID=$(docker logs ejbca | grep "msg=CA with id" | grep "and name acmeca added" | awk -F'with id ' '{print $2}' | awk -F' and name' '{print $1}') >> $GITHUB_ENV

    - run: echo "CAID of acmeca is ${{ env.CAID }}"

    - name: "Create subca"
      run: |
        docker exec -i ejbca bin/ejbca.sh ca init acmesubca "CN=acmesubca" soft foo123 4096 RSA -v 365 --policy 2.5.29.32.0 -s SHA256WithRSA --signedby $CAID
        docker exec -i ejbca bin/ejbca.sh ca importprofiles -d /tmp/data/

      env:
        CAID: ${{ env.CAID }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "Fetch superadmin certificate and key"
      working-directory: examples/Docker/
      run: |
        curl --data-urlencode "user=superadmin" --data-urlencode "password=${{ env.SAEC }}" --data-urlencode  "hidemenu=false" --data-urlencode "tokenKeySpec=RSA_2048" --data-urlencode "certprofile=ENDUSER" -H "Content-Type: application/x-www-form-urlencoded" -X POST https://127.0.0.1/ejbca/certreq --insecure -o data/superadmin.p12 --insecure

    - name: "Test superadmin  certificate and key"
      working-directory: examples/Docker/
      run: |
        curl -v  https://127.0.0.1/ejbca/ejbca-rest-api/v1/certificate/status --cert-type P12 --cert data/superadmin.p12:$SAEC --insecure
        curl -v  https://ejbca/ejbca/ejbca-rest-api/v1/certificate/status --cert-type P12 --cert data/superadmin.p12:$SAEC --cacert data/ca_bundle.pem
      env:
        SAEC: ${{ env.SAEC }}

    - name: "Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        docker-compose up -d
        docker-compose logs

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup a2c with ejbca_ca_handler"
      run: |
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/ejbca_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: https://ejbca" >> examples/Docker/data/acme_srv.cfg
        sudo echo "cert_file: volume/superadmin.p12" >> examples/Docker/data/acme_srv.cfg
        sudo echo "cert_passphrase: $SAEC" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: volume/ca_bundle.pem" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: acmesubca" >> examples/Docker/data/acme_srv.cfg
        sudo echo "cert_profile_name: acmeca" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ee_profile_name: acmeca" >> examples/Docker/data/acme_srv.cfg
        sudo echo "username: acme_srv" >> examples/Docker/data/acme_srv.cfg
        sudo echo "enrollment_code: acme_srv" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        SAEC: ${{ env.SAEC }}

    - name: "Test http://acme-srv/directory is accessable again"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme/ca.cer
        openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email


    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/a2c.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz a2c.log data acme-sh certbot lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: ejbca.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  ejbca_ca_handler_tests_rpm:
    name: " ejbca_ca_handler_tests_rpm"
    runs-on: ubuntu-latest
    steps:

    - name: "checkout GIT"
      uses: actions/checkout@v3

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Prepare Environment"
      run: |
        mkdir -p data/acme_ca
        sudo chmod -R 777 data
        docker network create acme
        sudo sh -c "echo '$EJBCA_IP ejbca' >> /etc/hosts"
      env:
        EJBCA_IP: ${{ env.RUNNER_IP }}

    - name: "[ PREPARE ] create acme-sh, letsencrypt and lego folders"
      run: |
        mkdir certbot
        mkdir lego
        mkdir acme-sh

    - name: "Instanciate ejbca server"
      run: |
        docker run -id --rm -p 80:8080 -p 443:8443 -v $(pwd)/examples/ejbca:/tmp/data  -v $(pwd)/data:/tmp/store --name "ejbca" -h ejbca primekey/ejbca-ce

    - name: "Sleep for 180s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 180s

    - name: "Get randmonly generated Superadmin password for ejbca instance"
      run: |
        echo SAEC=$(docker logs ejbca | grep /opt/primekey/bin/start.sh | grep Password: | awk -F'Password: ' '{print $2}' | awk -F ' ' '{print $1}') >> $GITHUB_ENV

    - run: echo "Randmonly generated Superadmin password is ${{ env.SAEC }}"
    - run: echo  ${{ env.SAEC }} > data/passphrase.txt

    - name: "Configure ejbca"
      run: |
        docker exec -i ejbca bin/ejbca.sh ca getcacert --caname ManagementCA -f /tmp/store/acme_ca/ca_bundle.pem
        docker exec -i ejbca bin/ejbca.sh config protocols enable --name "REST Certificate Management"
        docker exec -i ejbca bin/ejbca.sh config protocols enable --name "REST Certificate Management V2"
        docker exec -i ejbca bin/ejbca.sh ca init acmeca "CN=acmeca" soft foo123 4096 RSA -v 365 --policy 2.5.29.32.0 -s SHA256WithRSA

    - name: "Get CAID"
      run: |
        echo CAID=$(docker logs ejbca | grep "msg=CA with id" | grep "and name acmeca added" | awk -F'with id ' '{print $2}' | awk -F' and name' '{print $1}') >> $GITHUB_ENV

    - run: echo "CAID of acmeca is ${{ env.CAID }}"

    - name: "Create subca"
      run: |
        docker exec -i ejbca bin/ejbca.sh ca init acmesubca "CN=acmesubca" soft foo123 4096 RSA -v 365 --policy 2.5.29.32.0 -s SHA256WithRSA --signedby $CAID
        docker exec -i ejbca bin/ejbca.sh ca importprofiles -d /tmp/data/

      env:
        CAID: ${{ env.CAID }}

    - name: "Sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "Fetch superadmin certificate and key"
      run: |
        curl --data-urlencode "user=superadmin" --data-urlencode "password=${{ env.SAEC }}" --data-urlencode  "hidemenu=false" --data-urlencode "tokenKeySpec=RSA_2048" --data-urlencode "certprofile=ENDUSER" -H "Content-Type: application/x-www-form-urlencoded" -X POST https://127.0.0.1/ejbca/certreq --insecure -o data/acme_ca/superadmin.p12 --insecure

    - name: "Test superadmin  certificate and key"
      run: |
        curl -v  https://127.0.0.1/ejbca/ejbca-rest-api/v1/certificate/status --cert-type P12 --cert data/acme_ca/superadmin.p12:$SAEC --insecure
        curl -v  https://ejbca/ejbca/ejbca-rest-api/v1/certificate/status --cert-type P12 --cert data/acme_ca/superadmin.p12:$SAEC --cacert data/acme_ca/ca_bundle.pem
      env:
        SAEC: ${{ env.SAEC }}

    - name: Retrieve Version from version.py
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\'//g) >> $GITHUB_ENV
    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: update version number in spec file
      run: |
        # sudo sed -i "s/Source0:.*/Source0:        %{name}-%{version}.tar.gz/g" examples/install_scripts/rpm/acme2certifier.spec
        sudo sed -i "s/__version__/${{ env.TAG_NAME }}/g" examples/install_scripts/rpm/acme2certifier.spec
        cat examples/install_scripts/rpm/acme2certifier.spec

    - name: build RPM package
      id: rpm
      uses: naveenrajm7/rpmbuild@master
      with:
        spec_file: "examples/install_scripts/rpm/acme2certifier.spec"

    - run: echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}"

    - name: "[ PREPARE ] setup environment for alma installation"
      run: |
        sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch/acme2certifier-${{ env.TAG_NAME }}-1.0.noarch.rpm data
        sudo cp examples/Docker/almalinux-systemd/rpm_tester.sh data

    - name: "[ PREPARE ] setup a2c with ejbca_ca_handler"
      run: |
        sudo touch data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/ejbca_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "api_host: https://ejbca" >> data/acme_srv.cfg
        sudo echo "cert_file: /opt/acme2certifier/volume/acme_ca/superadmin.p12" >> data/acme_srv.cfg
        sudo echo "cert_passphrase: $SAEC" >> data/acme_srv.cfg
        sudo echo "ca_bundle: /opt/acme2certifier/volume/acme_ca/ca_bundle.pem" >> data/acme_srv.cfg
        sudo echo "ca_name: acmesubca" >> data/acme_srv.cfg
        sudo echo "cert_profile_name: acmeca" >> data/acme_srv.cfg
        sudo echo "ee_profile_name: acmeca" >> data/acme_srv.cfg
        sudo echo "username: acme_srv" >> data/acme_srv.cfg
        sudo echo "enrollment_code: acme_srv" >> data/acme_srv.cfg
      env:
        SAEC: ${{ env.SAEC }}

    - name: "[ PREPARE ] Almalinux instance"
      run: |
        cat examples/Docker/almalinux-systemd/Dockerfile | docker build -t almalinux-systemd -f - . --no-cache
        docker run -d -id --privileged --network acme --name=acme-srv -v "$(pwd)/data":/tmp/acme2certifier almalinux-systemd

    - name: "[ RUN ] Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh

    - name: "Test http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme/ca.cer
        openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme/acme-sh.acme.cer

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot/live/certbot/cert.pem

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: certifier_ca_handler_rpm.tar.gz
        path: ${{ github.workspace }}/artifact/upload/