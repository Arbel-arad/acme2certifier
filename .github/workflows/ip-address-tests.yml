name: Certificates for IP addresses tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  ip_apache2_wsgi:
    name: "ip_apache2_wsgi"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup a2c with certifier_ca_handler"
      run: |
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/certifier_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: $NCM_API_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: $NCM_API_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: $NCM_API_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $NCM_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: $NCM_CA_BUNDLE" >> examples/Docker/data/acme_srv.cfg
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}

    - name: "Sleep for 5s"
      uses: grindsa/sleep-action@node20
      with:
        time: 5s

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "create lego folder"
      run: |
        mkdir lego

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo chmod 777 lego/certificates/lego.acme.issuer.crt
        sudo cp lego/certificates/lego.acme.issuer.crt lego.acme.issuer.crt
        sudo awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < lego.acme.issuer.crt
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_apache2_wsgi.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  ip_apache2_django:
    name: "ip_apache2_django"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build docker-compose (apache2_django)"
      working-directory: examples/Docker/
      run: |
        sed -i "s/wsgi/django/g" .env
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup a2c with certifier_ca_handler"
      run: |
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/certifier_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: $NCM_API_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: $NCM_API_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: $NCM_API_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $NCM_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: $NCM_CA_BUNDLE" >> examples/Docker/data/acme_srv.cfg
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo cp .github/acme2certifier.pem examples/Docker/data/acme2certifier.pem
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}

    - name: "Sleep for 5s"
      uses: grindsa/sleep-action@node20
      with:
        time: 5s

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "create lego folder"
      run: |
        mkdir lego

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo chmod 777 lego/certificates/lego.acme.issuer.crt
        sudo cp lego/certificates/lego.acme.issuer.crt lego.acme.issuer.crt
        sudo awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < lego.acme.issuer.crt
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_apache2_django.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  ip_nginx_wsgi:
    name: "ip_nginx_wsgi"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build docker-compose (nginx_wsgi)"
      working-directory: examples/Docker/
      run: |
        sed -i "s/apache2/nginx/g" .env
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup a2c with certifier_ca_handler"
      run: |
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/certifier_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: $NCM_API_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: $NCM_API_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: $NCM_API_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $NCM_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: $NCM_CA_BUNDLE" >> examples/Docker/data/acme_srv.cfg
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}

    - name: "Sleep for 5s"
      uses: grindsa/sleep-action@node20
      with:
        time: 5s

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "create lego folder"
      run: |
        mkdir lego

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo chmod 777 lego/certificates/lego.acme.issuer.crt
        sudo cp lego/certificates/lego.acme.issuer.crt lego.acme.issuer.crt
        sudo awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < lego.acme.issuer.crt
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_nginx_wsgi.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  ip_nginx_django:
    name: "ip_nginx_django"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "[ PREPARE ] get runner ip"
      run: |
        echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d '/' -f 1) >> $GITHUB_ENV
        echo RUNNER_PATH=$(pwd | sed 's_/_\\/_g') >> $GITHUB_ENV
    - run: echo "runner IP is ${{ env.RUNNER_IP }}"

    - name: "Build docker-compose (nginx_django)"
      working-directory: examples/Docker/
      run: |
        sed -i "s/wsgi/django/g" .env
        sed -i "s/apache2/nginx/g" .env
        sudo mkdir -p data
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup a2c with certifier_ca_handler"
      run: |
        sudo cp test/ca/certsrv_ca_certs.pem examples/Docker/data/ca_certs.pem
        sudo touch examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/certifier_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_host: $NCM_API_HOST" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_user: $NCM_API_USER" >> examples/Docker/data/acme_srv.cfg
        sudo echo "api_password: $NCM_API_PASSWORD" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_name: $NCM_CA_NAME" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: $NCM_CA_BUNDLE" >> examples/Docker/data/acme_srv.cfg
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo cp .github/acme2certifier_cert.pem examples/Docker/data/acme2certifier_cert.pem
        sudo cp .github/acme2certifier_key.pem examples/Docker/data/acme2certifier_key.pem
        cd examples/Docker/
        docker-compose restart
        docker-compose logs
      env:
        NCM_API_HOST: ${{ secrets.NCM_API_HOST }}
        NCM_API_USER: ${{ secrets.NCM_API_USER }}
        NCM_API_PASSWORD: ${{ secrets.NCM_API_PASSWORD }}
        NCM_CA_NAME: ${{ secrets.NCM_CA_NAME }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}

    - name: "Sleep for 5s"
      uses: grindsa/sleep-action@node20
      with:
        time: 5s

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "Test if https://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory

    - name: "create lego folder"
      run: |
        mkdir lego

    - name: "Enroll HTTP-01 single domain and ip address "
      run: |
        docker run -i -p 80:80 -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme -d $RUNNER_IP --http run
        sudo chmod 777 lego/certificates/lego.acme.issuer.crt
        sudo cp lego/certificates/lego.acme.issuer.crt lego.acme.issuer.crt
        sudo awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < lego.acme.issuer.crt
        sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
        sudo openssl x509 -in lego/certificates/lego.acme.crt --text --noout | grep "IP Address"
      env:
        RUNNER_IP: ${{ env.RUNNER_IP }}

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: ip_nginx_django.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
