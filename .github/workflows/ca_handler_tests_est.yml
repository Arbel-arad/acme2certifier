name: CA handler tests - EST handler

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  est_handler_tests:
    name: "est_handler_tests"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: "[ PREPARE ] create network"
      run: |
        docker network create acme

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        sudo mkdir -p data
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] create letsencrypt and lego folder"
      run: |
        mkdir acme-sh
        mkdir lego

    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] setup esthandler using http-basic-auth"
      run: |
        sudo mkdir -p examples/Docker/data/est
        sudo chmod -R 777 examples/Docker/data/est
        sudo touch $HOME/.rnd
        sudo openssl ecparam -genkey -name prime256v1 -out examples/Docker/data/est/est_client_key.pem
        sudo openssl req -new -key examples/Docker/data/est/est_client_key.pem -out /tmp/request.p10 -subj '/CN=acme2certifier' -addext "extendedKeyUsage = serverAuth, clientAuth" -addext keyUsage=keyEncipherment
        sudo curl http://testrfc7030.com/dstcax3.pem --output /tmp/dstcax3.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/cacerts -o /tmp/cacerts.p7 --cacert /tmp/dstcax3.pem
        sudo openssl base64 -d -in /tmp/cacerts.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out examples/Docker/data/est/ca_bundle.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/simpleenroll --anyauth -u estuser:estpwd -s -o /tmp/cert.p7 --cacert /tmp/dstcax3.pem --data-binary @/tmp/request.p10 -H "Content-Type: application/pkcs10" --dump-header /tmp/resp.hdr
        sudo openssl base64 -d -in /tmp/cert.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out examples/Docker/data/est/est_client_cert.pem
        sudo openssl pkcs12 -export -out examples/Docker/data/est/est_client_cert.p12 -inkey examples/Docker/data/est/est_client_key.pem -in examples/Docker/data/est/est_client_cert.pem -passout pass:Test1234
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo chmod 777 examples/Docker/data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
        sudo echo "handler_file: examples/ca_handler/est_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_host: https://testrfc7030.com:8443" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_user: estuser" >> examples/Docker/data/acme_srv.cfg
        sudo echo "est_password: estpwd" >> examples/Docker/data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] via EST using http-basic-auth"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile examples/Docker/data/est/ca_bundle.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    # Clientauth tests are not working on testrfc7030 and are done insed openxpi wf
    #- name: "[ PREPARE ] delete lego and acme.sh"
    #  run: |
    #    sudo rm -rf lego/*
    #    sudo rm -rf acme-sh/*

    #- name: "[ PREPARE ] setup using tls-client-auth"
    #  run: |
    #    sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
    #    sudo echo "handler_file: examples/ca_handler/est_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "est_host: https://testrfc7030.com:9443" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "est_client_key: volume/est/est_client_key.pem" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "est_client_cert: volume/est/est_client_cert.pem" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "ca_bundle: volume/est/ca_bundle.pem" >> examples/Docker/data/acme_srv.cfg
    #    cd examples/Docker/
    #    docker-compose restart
    #    docker-compose logs

    #- name: "[ ENROLL ] via est using tls-client-auth"
    #  run: |
    #    docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force

    #- name: "[ ENROLL ] lego"
    #  run: |
    #    docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    #- name: "[ PREPARE ] delete lego and acme.sh"
    #  run: |
    #    sudo rm -rf lego/*
    #    sudo rm -rf acme-sh/*

    #- name: "[ PREPARE ] setup using tls-client-auth via pkcs12"
    #  run: |
    #    sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > examples/Docker/data/acme_srv.cfg
    #    sudo echo "handler_file: examples/ca_handler/est_ca_handler.py" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "est_host: https://testrfc7030.com:9443" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "est_client_cert: volume/est/est_client_cert.p12" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "cert_passphrase: Test1234" >> examples/Docker/data/acme_srv.cfg
    #    sudo echo "ca_bundle: volume/est/ca_bundle.pem" >> examples/Docker/data/acme_srv.cfg
    #    cd examples/Docker/
    #    docker-compose restart
    #    docker-compose logs

    #- name: "[ ENROLL ] via est using tls-client-auth"
    #  run: |
    #    docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force

    #- name: "[ ENROLL ] lego"
    #  run: |
    #    docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: est.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  est_handler_tests_rpm:
    name: "est_handler_tests_rpm"
    runs-on: ubuntu-latest
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v4

    - name: Retrieve Version from version.py
      run: |
        echo TAG_NAME=$(cat acme_srv/version.py | grep -i __version__ | head -n 1 | sed 's/__version__ = //g' | sed s/\'//g) >> $GITHUB_ENV
    - run: echo "Latest tag is ${{ env.TAG_NAME }}"

    - name: update version number in spec file
      run: |
        # sudo sed -i "s/Source0:.*/Source0:        %{name}-%{version}.tar.gz/g" examples/install_scripts/rpm/acme2certifier.spec
        sudo sed -i "s/__version__/${{ env.TAG_NAME }}/g" examples/install_scripts/rpm/acme2certifier.spec
        cat examples/install_scripts/rpm/acme2certifier.spec

    - name: build RPM package
      id: rpm
      uses: grindsa/rpmbuild@alma9
      with:
        spec_file: "examples/install_scripts/rpm/acme2certifier.spec"

    - run: echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}"

    - name: "[ PREPARE ] setup environment for alma installation"
      run: |
        docker network create acme
        sudo mkdir -p data
        sudo chmod -R 777 data
        sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch/acme2certifier-${{ env.TAG_NAME }}-1.0.noarch.rpm data
        sudo cp examples/Docker/almalinux-systemd/rpm_tester.sh data

    - name: "[ PREPARE ] create acme-sh and lego folder"
      run: |
        mkdir acme-sh
        mkdir lego

    - name: "[ PREPARE ] setup esthandler using http-basic-auth"
      run: |
        sudo mkdir -p data/acme_ca
        sudo touch $HOME/.rnd
        sudo chmod -R 777 data/acme_ca
        sudo openssl ecparam -genkey -name prime256v1 -out data/acme_ca/est_client_key.pem
        sudo chmod a+rx data/acme_ca/est_client_key.pem
        sudo openssl req -new -key data/acme_ca/est_client_key.pem -out /tmp/request.p10 -subj '/CN=acme2certifier'
        sudo curl http://testrfc7030.com/dstcax3.pem --output /tmp/dstcax3.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/cacerts -o /tmp/cacerts.p7 --cacert /tmp/dstcax3.pem
        sudo openssl base64 -d -in /tmp/cacerts.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out data/acme_ca/ca_bundle.pem
        sudo curl https://testrfc7030.com:8443/.well-known/est/simpleenroll --anyauth -u estuser:estpwd -s -o /tmp/cert.p7 --cacert /tmp/dstcax3.pem --data-binary @/tmp/request.p10 -H "Content-Type: application/pkcs10" --dump-header /tmp/resp.hdr
        sudo openssl base64 -d -in /tmp/cert.p7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out data/acme_ca/est_client_cert.pem
        sudo openssl pkcs12 -export -out data/acme_ca/est_client_cert.p12 -inkey data/acme_ca/est_client_key.pem -in data/acme_ca/est_client_cert.pem -passout pass:Test1234
        sudo chmod -R 777 data/acme_ca
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg data/acme_srv.cfg
        sudo chmod 777 data/acme_srv.cfg
        sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
        sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/est_ca_handler.py" >> data/acme_srv.cfg
        sudo echo "est_host: https://testrfc7030.com:8443" >> data/acme_srv.cfg
        sudo echo "est_user: estuser" >> data/acme_srv.cfg
        sudo echo "est_password: estpwd" >> data/acme_srv.cfg
        sudo echo "ca_bundle: False" >> data/acme_srv.cfg

    - name: "[ PREPARE ] Almalinux instance"
      run: |
        cat examples/Docker/almalinux-systemd/Dockerfile | docker build -t almalinux-systemd -f - . --no-cache
        docker run -d -id --privileged --network acme --name=acme-srv -v "$(pwd)/data":/tmp/acme2certifier almalinux-systemd

    - name: "[ RUN ] Execute install scipt"
      run: |
        docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh

    - name: "Test http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest daemon

    - name: "[ ENROLL ] via EST using http-basic-auth"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force
        # openssl verify -CAfile data/acme_ca/ca_bundle.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer

    - name: "[ ENROLL ] lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        # sudo openssl verify -CAfile data/acme_ca/ca_bundle.pem lego/certificates/lego.acme.crt

    - name: "[ PREPARE ] delete lego and acme.sh"
      run: |
        sudo rm -rf lego/*
        sudo rm -rf acme-sh/*

    # Clientauth tests are not working on testrfc7030 and are done insed openxpi wf
    #- name: "[ PREPARE ] setup using tls-client-auth"
    #  run: |
    #    sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
    #    sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/est_ca_handler.py" >> data/acme_srv.cfg
    #    sudo echo "est_host: https://testrfc7030.com:9443" >> data/acme_srv.cfg
    #    sudo echo "est_client_key: volume/acme_ca/est_client_key.pem" >> data/acme_srv.cfg
    #    sudo echo "est_client_cert: volume/acme_ca/est_client_cert.pem" >> data/acme_srv.cfg
    #    sudo echo "ca_bundle: volume/acme_ca/ca_bundle.pem" >> data/acme_srv.cfg

    #- name: "[ PREPARE  ] reconfigure est ca-handler "
    #  run: |
    #    docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh restart

    #- name: "[ ENROLL ] via est using tls-client-auth"
    #  run: |
    #    docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force

    #- name: "[ ENROLL ] lego"
    #  run: |
    #    docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    #- name: "[ PREPARE ] delete lego and acme.sh"
    #  run: |
    #    sudo rm -rf lego/*
    #    sudo rm -rf acme-sh/*

    #- name: "[ PREPARE ] setup using tls-client-auth"
    #  run: |
    #    sudo head -n -8 .github/openssl_ca_handler.py_acme_srv_default_handler.cfg > data/acme_srv.cfg
    #    sudo echo "handler_file: /opt/acme2certifier/examples/ca_handler/est_ca_handler.py" >> data/acme_srv.cfg
    #    sudo echo "est_host: https://testrfc7030.com:9443" >> data/acme_srv.cfg
    #    sudo echo "est_client_cert: volume/acme_ca/est_client_cert.p12" >> data/acme_srv.cfg
    #    sudo echo "cert_passphrase: Test1234" >> data/acme_srv.cfg
    #    sudo echo "ca_bundle: False" >> data/acme_srv.cfg

    #- name: "[ PREPARE  ] reconfigure est ca-handler "
    #  run: |
    #    docker exec acme-srv sh /tmp/acme2certifier/rpm_tester.sh restart

    #- name: "[ ENROLL ] via est using tls-client-auth"
    #  run: |
    #    docker exec -i acme-sh acme.sh --server http://acme-srv --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure --force

    #- name: "[ ENROLL ] lego"
    #  run: |
    #    docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        docker exec acme-srv tar cvfz /tmp/acme2certifier/a2c.tgz /opt/acme2certifier
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        docker exec acme-srv cat /var/log/messages > ${{ github.workspace }}/artifact/acme-srv.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data acme-srv.log acme-sh

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v4
      if: ${{ failure() }}
      with:
        name: est-rpm.tar.gz
        path: ${{ github.workspace }}/artifact/upload/