name: Application Tests

on:
  push:
  pull_request:
    branches: [ devel ]
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  docker-compose_apache2_wsgi:
    name: "Docker compose - apache2 wsgi"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Build the stack"
      working-directory: examples/Docker/
      run: |
        docker network create acme
        docker-compose up -d
        docker-compose logs
    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory
  docker-compose_nginx_wsgi:
    name: "Docker compose - nginx wsgi"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Build the stack"
      working-directory: examples/Docker/
      run: |
        sed -i "s/apache2/nginx/g" .env
        docker network create acme
        docker-compose up -d
        docker-compose logs
    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory
  docker-compose_apache2_django:
    name: "Docker compose - apache2 django"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: "Build the stack"
      working-directory: examples/Docker/
      run: |
        sed -i "s/wsgi/django/g" .env
        docker network create acme
        docker-compose up -d
        docker-compose logs
    - name: "Test http://acme-srv/directory is accessable"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory
  acme_sh:
    name: "acme.sh"
    needs: [docker-compose_apache2_django]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        accountkeylength: [2048, ec-256, ec-384, ec-521]
        keylength: [2048, 3072, 4096, ec-521]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose (apache2_django)"
      working-directory: examples/Docker/
      run: |
        sed -i "s/wsgi/django/g" .env
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup openssl ca_handler and create django configuration"
      run: |
        sudo cp examples/ca_handler/openssl_ca_handler.py examples/Docker/data/ca_handler.py
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        sudo cp .github/django_settings.py examples/Docker/data/settings.py
        sudo cp .github/django_db.sqlite3 examples/Docker/data/db.sqlite3
        sudo chmod a+w .github/django_db.sqlite3 examples/Docker/data/db.sqlite3
        cd examples/Docker/
        docker-compose restart
        # chown www-data.www-data data/db.sqlite3
        # chmod a+w data/db.sqlite3
        docker-compose logs

    - name: "[ PREPARE ] prepare acme.sh container"
      run: |
        docker run --rm -id -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:dev daemon

    - name: "[ ENROLL ] HTTP-01 single domain acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --keylength ${{ matrix.keylength }} --accountkeylength ${{ matrix.accountkeylength }} --accountemail 'acme-sh@example.com' --issue -d acme-sh.acme --standalone --debug 3 --output-insecure
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="_ecc"
        fi
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme${ECC}/acme-sh.acme.cer

    - name: "[ RENEW ] HTTP-01 single domain acme.sh"
      run: |
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="--ecc"
        fi
        docker exec -i acme-sh acme.sh --server http://acme-srv --keylength ${{ matrix.keylength }} --renew --force ${ECC} -d acme-sh.acme --standalone --debug 3 --output-insecure
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="_ecc"
        fi
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme${ECC}/acme-sh.acme.cer

    - name: "[ REVOKE ] HTTP-01 single domain acme.sh"
      run: |
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="--ecc"
        fi
        docker exec -i acme-sh acme.sh --server http://acme-srv --revoke ${ECC} -d acme-sh.acme --standalone --debug 2 --output-insecure

    - name: "[ ENROLL ] HTTP-01 2x domain acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --keylength ${{ matrix.keylength }} --issue -d acme-sh.acme -d acme-sh --standalone --debug 3 --output-insecure
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="_ecc"
        fi
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme${ECC}/acme-sh.acme.cer

    - name: "[ RENEW ] HTTP-01 2x domain acme.sh"
      run: |
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="--ecc"
        fi
        docker exec -i acme-sh acme.sh --server http://acme-srv --keylength ${{ matrix.keylength }} --renew --force ${ECC} -d acme-sh.acme -d acme-sh --standalone --debug 3 --output-insecure
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="_ecc"
        fi
        openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem acme-sh/acme-sh.acme${ECC}/acme-sh.acme.cer

    - name: "[ REVOKE ] HTTP-01 2x domain acme.sh"
      run: |
        if ([ "${{ matrix.keylength }}" == "ec-256" ] || [ "${{ matrix.keylength }}" == "ec-384" ] || [ "${{ matrix.keylength }}" == "ec-521" ]) ; then
          ECC="--ecc"
        fi
        docker exec -i acme-sh acme.sh --server http://acme-srv --revoke ${ECC} -d acme-sh.acme -d acme-sh --standalone --debug 3 --output-insecure

    - name: "[ DEACTIVATE ] acme.sh"
      run: |
        docker exec -i acme-sh acme.sh --server http://acme-srv --deactivate-account --debug 2 --output-insecure

    - name: "[ * ] collecting test data"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp acme-sh/ ${{ github.workspace }}/artifact/acme-sh/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data acme-sh

    - name: "[ * ] uploading artifacts"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: acme.sh_acc-${{ matrix.accountkeylength }}_key-${{ matrix.keylength }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  certbot:
    name: "certbot"
    needs: [docker-compose_apache2_wsgi]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        keylength: [2048, 3072, 4096]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose (apache2_wsgi)"
      working-directory: examples/Docker/
      run: |
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup openssl ca_handler"
      run: |
        sudo cp examples/ca_handler/openssl_ca_handler.py examples/Docker/data/ca_handler.py
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp .github/openssl_ca_handler.py_acme_srv_default_handler.cfg examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "[ PREPARE ] create letsencrypt folder"
      run: |
        mkdir certbot

    - name: "[ REGISTER] certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email

    - name: "[ ENROLL ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --rsa-key-size ${{ matrix.keylength }} --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem certbot/live/certbot/cert.pem

    - name: "[ RENEW ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --rsa-key-size ${{ matrix.keylength }} --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem certbot/live/certbot/cert.pem

    - name: "[ REVOKE ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot revoke --delete-after-revoke --server http://acme-srv  -d certbot.acme --cert-name certbot

    - name: "[ ENROLL ] HTTP-01 2x domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --rsa-key-size ${{ matrix.keylength }} --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme -d certbot --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem certbot/live/certbot/cert.pem

    - name: "[ RENEW ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --rsa-key-size ${{ matrix.keylength }} --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme -d certbot --cert-name certbot
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem certbot/live/certbot/cert.pem

    - name: "[ REVOKE ] HTTP-01 single domain certbot"
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot revoke --delete-after-revoke --server http://acme-srv  -d certbot.acme -d certbot --cert-name certbot

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp certbot/ ${{ github.workspace }}/artifact/certbot/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data certbot

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: certbot_key-${{ matrix.keylength }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  lego:
    name: "lego"
    needs: [docker-compose_nginx_wsgi]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        keylength: [rsa2048, rsa4096, rsa8192, ec256, ec384]
    steps:
    - name: "checkout GIT"
      uses: actions/checkout@v2

    - name: "[ PREPARE ] Build docker-compose (nginx_wsgi)"
      working-directory: examples/Docker/
      run: |
        sed -i "s/apache2/nginx/g" .env
        docker network create acme
        docker-compose up -d
        docker-compose logs

    - name: "[ PREPARE ] setup openssl ca_handler"
      run: |
        # sudo cp examples/ca_handler/openssl_ca_handler.py examples/Docker/data/ca_handler.py
        sudo mkdir -p examples/Docker/data/acme_ca/certs
        sudo cp test/ca/sub-ca-key.pem test/ca/sub-ca-crl.pem test/ca/sub-ca-cert.pem test/ca/root-ca-cert.pem examples/Docker/data/acme_ca/
        sudo cp .github/openssl_ca_handler.py_acme_srv_choosen_handler.cfg examples/Docker/data/acme_srv.cfg
        cd examples/Docker/
        docker-compose restart
        docker-compose logs

    - name: "create lego folder"
      run: |
        mkdir lego

    - name: "[ ENROLL ] HTTP-01 single domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme --http run
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem lego/certificates/lego.acme.crt

    - name: "[ RENEW ] HTTP-01 single domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme --http renew
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem lego/certificates/lego.acme.crt

    - name: "[ REVOKE ] HTTP-01 single domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme revoke

    - name: "[ ENROLL ] HTTP-01 2x domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme -d lego --http run
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem lego/certificates/lego.acme.crt

    - name: "[ RENEW ] HTTP-01 2x domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme -d lego --http renew
        sudo openssl verify -CAfile examples/Docker/data/acme_ca/root-ca-cert.pem -untrusted examples/Docker/data/acme_ca/sub-ca-cert.pem lego/certificates/lego.acme.crt

    - name: "[ REVOKE ] HTTP-01 2x domain lego"
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --key-type ${{ matrix.keylength }} --email "lego@example.com" -d lego.acme revoke

    - name: "[ * ] collecting test logs"
      if: ${{ failure() }}
      run: |
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp examples/Docker/data/ ${{ github.workspace }}/artifact/data/
        sudo cp -rp lego/ ${{ github.workspace }}/artifact/lego/
        cd examples/Docker
        docker-compose logs > ${{ github.workspace }}/artifact/docker-compose.log
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz docker-compose.log data lego

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: lego_key-${{ matrix.keylength }}.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
