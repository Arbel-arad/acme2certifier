name: "acme_clients"
description: "Test if acme.sh, certbot and lego can enroll, renew and certificates"
inputs:
  ACME_SERVER:
    description: "ACME server URL"
    required: true
    default: "acme-srv"
  REVOCATION:
    description: "Revocation method"
    required: true
    default: "true"
  RENEWAL:
    description: "Renewal method"
    required: true
    default: "true"
  VERIFY_CERT:
    description: "Verify certificate"
    required: true
    default: "true"
  USE_CERTBOT:
    description: "Use certbot"
    required: true
    default: "true"

runs:
  using: "composite"
  steps:

    - name: "Create directories"
      run: |
        mkdir -p acme-sh/
        mkdir -p certbot/
        mkdir -p lego/ca
        sudo cp .github/acme2certifier_cabundle.pem certbot/
        sudo cp .github/acme2certifier_cabundle.pem lego/
      shell: bash

    - name: "Sleep for 5s"
      uses: juliangruber/sleep-action@v2.0.3
      with:
        time: 5s

    - name: "Test if http://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl -f http://acme-srv/directory
      shell: bash

    - name: "Test if https://acme-srv/directory is accessible"
      run: docker run -i --rm --network acme curlimages/curl --insecure -f https://acme-srv/directory
      shell: bash

    - name: "HTTPS - Enroll acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server https://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --insecure
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme_ecc/ca.cer
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          else
            echo "single root ca"
            openssl verify -CAfile cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTPS - Renew acme.sh"
      if: ${{ inputs.RENEWAL == 'true' }}
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --renew --server https://acme-srv  --force --accountemail 'acme-sh@example.com' -d acme-sh.acme --alpn --standalone --debug 3 --output-insecure --insecure
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme_ecc/ca.cer
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          else
            echo "single root ca"
            openssl verify -CAfile cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTPS - Revoke HTTP-01 single domain acme.sh"
      if: ${{ inputs.REVOCATION == 'true' }}
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --name=acme-sh --network acme neilpang/acme.sh:latest --revoke --server https://acme-srv --revoke -d acme-sh.acme --standalone --debug 2 --output-insecure  --insecure
      shell: bash

    - name: "HTTPS - Decativate acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --name=acme-sh --network acme neilpang/acme.sh:latest --deactivate-account --server https://acme-srv --debug 2 --output-insecure --insecure
      shell: bash

    - name: "HTTP - Enroll acme.sh"
      run: |
        sudo rm -rf acme-sh/*
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --issue --server http://acme-srv  --accountemail 'acme-sh@example.com' -d acme-sh.acme --standalone --debug 3 --output-insecure --insecure
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme_ecc/ca.cer
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          else
            echo "single root ca"
            openssl verify -CAfile cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTP - Renew acme.sh"
      if: ${{ inputs.RENEWAL == 'true' }}
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --network acme --name=acme-sh neilpang/acme.sh:latest --renew --server http://acme-srv  --force --accountemail 'acme-sh@example.com' -d acme-sh.acme --standalone --debug 3 --output-insecure --insecure
        awk 'BEGIN {c=0;} /BEGIN CERT/{c++} { print > "cert-" c ".pem"}' < acme-sh/acme-sh.acme_ecc/ca.cer
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          else
            echo "single root ca"
            openssl verify -CAfile cert-1.pem acme-sh/acme-sh.acme_ecc/acme-sh.acme.cer
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTP - Revoke HTTP-01 single domain acme.sh"
      if: ${{ inputs.REVOCATION == 'true' }}
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --name=acme-sh --network acme neilpang/acme.sh:latest --revoke --server http://acme-srv --revoke -d acme-sh.acme --standalone --debug 2 --output-insecure  --insecure
      shell: bash

    - name: "HTTP - Decativate acme.sh"
      run: |
        docker run --rm -i -v "$(pwd)/acme-sh":/acme.sh --name=acme-sh --network acme neilpang/acme.sh:latest --deactivate-account --server http://acme-srv --debug 2 --output-insecure --insecure
      shell: bash

    - name: "HTTPS - Register certbot"
      if: ${{ inputs.USE_CERTBOT == 'true' }}
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server https://acme-srv --no-eff-email --no-verify-ssl
      shell: bash

    - name: "HTTPS - Enroll certbot"
      if: ${{ inputs.USE_CERTBOT == 'true' }}
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server https://acme-srv --standalone --preferred-challenges http --no-verify-ssl -d certbot.acme --cert-name certbot
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot/live/certbot/cert.pem
          else
            echo "single root ca"
            sudo openssl verify -CAfile cert-1.pem certbot/live/certbot/cert.pem
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTPS - Revoke certbot"
      if: ${{ (inputs.USE_CERTBOT == 'true') && (inputs.REVOCATION == 'true') }}
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot revoke --server https://acme-srv --no-verify-ssl --delete-after-revoke --cert-name certbot
      shell: bash

    - name: "HTTP - Register certbot"
      if: ${{ inputs.USE_CERTBOT == 'true' }}
      run: |
        sudo rm -rf certbot/*
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot register --agree-tos -m 'certbot@example.com' --server http://acme-srv --no-eff-email
      shell: bash

    - name: "HTTP - Enroll certbot"
      if: ${{ inputs.USE_CERTBOT == 'true' }}
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot certonly --server http://acme-srv --standalone --preferred-challenges http -d certbot.acme --cert-name certbot
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot/live/certbot/cert.pem
          else
            echo "single root ca"
            sudo openssl verify -CAfile cert-1.pem certbot/live/certbot/cert.pem
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTP - Revoke certbot"
      if: ${{ (inputs.USE_CERTBOT == 'true') && (inputs.REVOCATION == 'true') }}
      run: |
        docker run -i --rm --name certbot --network acme -v $PWD/certbot:/etc/letsencrypt/ certbot/certbot revoke --server http://acme-srv --delete-after-revoke --cert-name certbot
      shell: bash

    - name: "HTTPS - Enroll lego"
      run: |
        docker run -i --rm -e LEGO_CA_CERTIFICATES=.lego/acme2certifier_cabundle.pem -v $PWD/lego:/.lego/ --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --tls run
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
          else
            echo "single root ca"
            sudo openssl verify -CAfile cert-1.pem lego/certificates/lego.acme.crt
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTPS - Revoke lego"
      if: ${{ inputs.REVOCATION == 'true' }}
      run: |
        # docker run -i --rm -e LEGO_CA_CERTIFICATES=.lego/acme2certifier_cabundle.pem -v $PWD/lego:/.lego/ --name lego --network acme goacme/lego -s https://acme-srv -a --email "lego@example.com" -d lego.acme revoke
      shell: bash

    - name: "HTTP - Enroll lego"
      run: |
        sudo rm -rf lego/*
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme --http run
        if [ "$VERIFY_CERT" == "true" ]; then
          if [ -f cert-2.pem ]; then
            sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego/certificates/lego.acme.crt
          else
            echo "single root ca"
            sudo openssl verify -CAfile cert-1.pem lego/certificates/lego.acme.crt
          fi
        fi
      shell: bash
      env:
        VERIFY_CERT: ${{ inputs.VERIFY_CERT }}

    - name: "HTTP - Revoke lego"
      if: ${{ inputs.REVOCATION == 'true' }}
      run: |
        docker run -i -v $PWD/lego:/.lego/ --rm --name lego --network acme goacme/lego -s http://acme-srv -a --email "lego@example.com" -d lego.acme revoke
      shell: bash

    - name: "Delete acme-sh, letsencypt and lego folders"
      run: |
        sudo rm -rf  lego/*
        sudo rm -rf  acme-sh/*
        sudo rm -rf  certbot/*
      shell: bash